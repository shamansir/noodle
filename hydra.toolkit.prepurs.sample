import Toolkit.Families.MNoise as MNoise
import Toolkit.Families.MVoronoi as MVoronoi
import Toolkit.Families.MOsc as MOsc
import Toolkit.Families.MShape as MShape
import Toolkit.Families.MGradient as MGradient
import Toolkit.Families.MSrc as MSrc
import Toolkit.Families.MSolid as MSolid
import Toolkit.Families.MSrc as MSrc
import Toolkit.Families.MPrev as MPrev
import Toolkit.Families.MRotate as MRotate
import Toolkit.Families.MScale as MScale
import Toolkit.Families.MPixelate as MPixelate
import Toolkit.Families.MRepeat as MRepeat
import Toolkit.Families.MRepeatX as MRepeatX
import Toolkit.Families.MRepeatY as MRepeatY
import Toolkit.Families.MKaleid as MKaleid
import Toolkit.Families.MScroll as MScroll
import Toolkit.Families.MScrollX as MScrollX
import Toolkit.Families.MScrollY as MScrollY
import Toolkit.Families.MPosterize as MPosterize
import Toolkit.Families.MShift as MShift
import Toolkit.Families.MInvert as MInvert
import Toolkit.Families.MContrast as MContrast
import Toolkit.Families.MBrightness as MBrightness
import Toolkit.Families.MLuma as MLuma
import Toolkit.Families.MTresh as MTresh
import Toolkit.Families.MColor as MColor
import Toolkit.Families.MSaturate as MSaturate
import Toolkit.Families.MHue as MHue
import Toolkit.Families.MColorama as MColorama
import Toolkit.Families.MSum as MSum
import Toolkit.Families.MR as MR
import Toolkit.Families.MG as MG
import Toolkit.Families.MB as MB
import Toolkit.Families.MA as MA
import Toolkit.Families.MAdd as MAdd
import Toolkit.Families.MSub as MSub
import Toolkit.Families.MLayer as MLayer
import Toolkit.Families.MBlend as MBlend
import Toolkit.Families.MMult as MMult
import Toolkit.Families.MDiff as MDiff
import Toolkit.Families.MMask as MMask
import Toolkit.Families.MModulateRepeat as MModulateRepeat
import Toolkit.Families.MModulateRepeatX as MModulateRepeatX
import Toolkit.Families.MModulateRepeatY as MModulateRepeatY
import Toolkit.Families.MModulateKaleid as MModulateKaleid
import Toolkit.Families.MModulateScrollX as MModulateScrollX
import Toolkit.Families.MModulateScrollY as MModulateScrollY
import Toolkit.Families.MModulate as MModulate
import Toolkit.Families.MModulateScale as MModulateScale
import Toolkit.Families.MModulatePixelate as MModulatePixelate
import Toolkit.Families.MModulateRotate as MModulateRotate
import Toolkit.Families.MModulateHue as MModulateHue
import Toolkit.Families.MRender as MRender
import Toolkit.Families.MUpdate as MUpdate
import Toolkit.Families.MSetResolution as MSetResolution
import Toolkit.Families.MHush as MHush
import Toolkit.Families.MSetFunction as MSetFunction
import Toolkit.Families.MSpeed as MSpeed
import Toolkit.Families.MBpm as MBpm
import Toolkit.Families.MWidth as MWidth
import Toolkit.Families.MHeight as MHeight
import Toolkit.Families.MPi as MPi
import Toolkit.Families.MTime as MTime
import Toolkit.Families.MMouse as MMouse
import Toolkit.Families.MInitCam as MInitCam
import Toolkit.Families.MInitImage as MInitImage
import Toolkit.Families.MInitVideo as MInitVideo
import Toolkit.Families.MInit as MInit
import Toolkit.Families.MInitStream as MInitStream
import Toolkit.Families.MInitScreen as MInitScreen
import Toolkit.Families.MFast as MFast
import Toolkit.Families.MSmooth as MSmooth
import Toolkit.Families.MEase as MEase
import Toolkit.Families.MOffset as MOffset
import Toolkit.Families.MFit as MFit
import Toolkit.Families.MFft as MFft
import Toolkit.Families.MSetSmooth as MSetSmooth
import Toolkit.Families.MSetCutoff as MSetCutoff
import Toolkit.Families.MSetBins as MSetBins
import Toolkit.Families.MSetScale as MSetScale
import Toolkit.Families.MHide as MHide
import Toolkit.Families.MShow as MShow
import Toolkit.Families.MOut as MOut


type MNoise.Family m = -- {-> source <-}
    Family.Def Unit
        ( scale :: Value, offset :: Value )
        ( out :: Texture )
        m

type MVoronoi.Family m = -- {-> source <-}
    Family.Def Unit
        ( scale :: Value, speed :: Value, blending :: Value )
        ( out :: Texture )
        m

type MOsc.Family m = -- {-> source <-}
    Family.Def Unit
        ( frequency :: Value, sync :: Value, offset :: Value )
        ( out :: Texture )
        m

type MShape.Family m = -- {-> source <-}
    Family.Def Unit
        ( sides :: Value, radius :: Value, smoothing :: Value )
        ( out :: Texture )
        m

type MGradient.Family m = -- {-> source <-}
    Family.Def Unit
        ( speed :: Value )
        ( out :: Texture )
        m

type MSrc.Family m = -- {-> source <-}
    Family.Def Unit
        ( tex :: Texture )
        ( out :: Texture )
        m

type MSolid.Family m = -- {-> source <-}
    Family.Def Unit
        ( r :: Value, g :: Value, b :: Value, a :: Value )
        ( out :: Texture )
        m

type MSrc.Family m = -- {-> source <-}
    Family.Def Unit
        ( src :: Source )
        ( out :: Texture )
        m

type MPrev.Family m = -- {-> source <-}
    Family.Def Unit
        ( ? )
        ( out :: Texture )
        m

type MRotate.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, angle :: Value, speed :: Value )
        ( out :: Texture )
        m

type MScale.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, amount :: Value, xMult :: Value, yMult :: Value, offsetX :: Value, offsetY :: Value )
        ( out :: Texture )
        m

type MPixelate.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, pixelX :: Value, pixelY :: Value )
        ( out :: Texture )
        m

type MRepeat.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, repeatX :: Value, repeatY :: Value, offsetX :: Value, offsetY :: Value )
        ( out :: Texture )
        m

type MRepeatX.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, reps :: Value, offset :: Value )
        ( out :: Texture )
        m

type MRepeatY.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, reps :: Value, offset :: Value )
        ( out :: Texture )
        m

type MKaleid.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, nSides :: Value )
        ( out :: Texture )
        m

type MScroll.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, scrollX :: Value, scrollY :: Value, speedX :: Value, speedY :: Value )
        ( out :: Texture )
        m

type MScrollX.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, scrollX :: Value, speed :: Value )
        ( out :: Texture )
        m

type MScrollY.Family m = -- {-> geometry <-}
    Family.Def Unit
        ( what :: Texture, scrollY :: Value, speed :: Value )
        ( out :: Texture )
        m

type MPosterize.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, bins :: Value, gamma :: Value )
        ( out :: Texture )
        m

type MShift.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, r :: Value, g :: Value, b :: Value, a :: Value )
        ( out :: Texture )
        m

type MInvert.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MContrast.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MBrightness.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MLuma.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, treshold :: Value, tolerance :: Value )
        ( out :: Texture )
        m

type MTresh.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, treshold :: Value, tolerance :: Value )
        ( out :: Texture )
        m

type MColor.Family m = -- {-> color <-}
    Family.Def Unit
        ( r :: Value, g :: Value, b :: Value, a :: Value )
        ( out :: Texture )
        m

type MSaturate.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MHue.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, hue :: Value )
        ( out :: Texture )
        m

type MColorama.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MSum.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, ? )
        ( out :: Texture )
        m

type MR.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, scale :: Value, offset :: Value )
        ( out :: Texture )
        m

type MG.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, scale :: Value, offset :: Value )
        ( out :: Texture )
        m

type MB.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, scale :: Value, offset :: Value )
        ( out :: Texture )
        m

type MA.Family m = -- {-> color <-}
    Family.Def Unit
        ( what :: Texture, scale :: Value, offset :: Value )
        ( out :: Texture )
        m

type MAdd.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MSub.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MLayer.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MBlend.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MMult.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MDiff.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture )
        ( out :: Texture )
        m

type MMask.Family m = -- {-> blend <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture )
        ( out :: Texture )
        m

type MModulateRepeat.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, repeatX :: Value, repeatY :: Value, offsetX :: Value, offsetY :: Value )
        ( out :: Texture )
        m

type MModulateRepeatX.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, reps :: Value, offset :: Value )
        ( out :: Texture )
        m

type MModulateRepeatY.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, reps :: Value, offset :: Value )
        ( out :: Texture )
        m

type MModulateKaleid.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, nSides :: Value )
        ( out :: Texture )
        m

type MModulateScrollX.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, scrollX :: Value, speed :: Value )
        ( out :: Texture )
        m

type MModulateScrollY.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, scrollY :: Value, speed :: Value )
        ( out :: Texture )
        m

type MModulate.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MModulateScale.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, multiple :: Value, offset :: Value )
        ( out :: Texture )
        m

type MModulatePixelate.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, multiple :: Value, offset :: Value )
        ( out :: Texture )
        m

type MModulateRotate.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, multiple :: Value, offset :: Value )
        ( out :: Texture )
        m

type MModulateHue.Family m = -- {-> modulate <-}
    Family.Def Unit
        ( what :: Texture, with :: Texture, amount :: Value )
        ( out :: Texture )
        m

type MRender.Family m = -- {-> synth <-}
    Family.Def Unit
        ( from :: From )
        ( out :: Unit )
        m

type MUpdate.Family m = -- {-> synth <-}
    Family.Def Unit
        ( fn :: UpdateFn )
        ( out :: Unit )
        m

type MSetResolution.Family m = -- {-> synth <-}
    Family.Def Unit
        ( width :: Value, height :: Value )
        ( out :: Unit )
        m

type MHush.Family m = -- {-> synth <-}
    Family.Def Unit
        ( Unit :: Unknown )
        ( out :: Unit )
        m

type MSetFunction.Family m = -- {-> synth <-}
    Family.Def Unit
        ( fn :: GlslFn )
        ( out :: Unit )
        m

type MSpeed.Family m = -- {-> synth <-}
    Family.Def Unit
        ( v :: Value )
        ( out :: Unit )
        m

type MBpm.Family m = -- {-> synth <-}
    Family.Def Unit
        ( v :: Value )
        ( out :: Unit )
        m

type MWidth.Family m = -- {-> synth <-}
    Family.Def Unit
        ( )
        ( out :: Value )
        m

type MHeight.Family m = -- {-> synth <-}
    Family.Def Unit
        ( )
        ( out :: Value )
        m

type MPi.Family m = -- {-> synth <-}
    Family.Def Unit
        ( )
        ( out :: Value )
        m

type MTime.Family m = -- {-> synth <-}
    Family.Def Unit
        ( )
        ( out :: Value )
        m

type MMouse.Family m = -- {-> synth <-}
    Family.Def Unit
        ( )
        ( out :: Value )
        m

type MInitCam.Family m = -- {-> extsource <-}
    Family.Def Unit
        ( where :: Source, index :: Value )
        ( out :: Unit )
        m

type MInitImage.Family m = -- {-> extsource <-}
    Family.Def Unit
        ( where :: Source, url :: String )
        ( out :: Unit )
        m

type MInitVideo.Family m = -- {-> extsource <-}
    Family.Def Unit
        ( where :: Source, url :: String )
        ( out :: Unit )
        m

type MInit.Family m = -- {-> extsource <-}
    Family.Def Unit
        ( where :: SourceOptions )
        ( out :: Unit )
        m

type MInitStream.Family m = -- {-> extsource <-}
    Family.Def Unit
        ( where :: Source, ? )
        ( out :: Unit )
        m

type MInitScreen.Family m = -- {-> extsource <-}
    Family.Def Unit
        ( where :: Source )
        ( out :: Unit )
        m

type MFast.Family m = -- {-> array <-}
    Family.Def Unit
        ( a :: Array, speed :: Value )
        ( out :: Value )
        m

type MSmooth.Family m = -- {-> array <-}
    Family.Def Unit
        ( a :: Array, smooth :: Value )
        ( out :: Value )
        m

type MEase.Family m = -- {-> array <-}
    Family.Def Unit
        ( a :: Array, ease :: Ease )
        ( out :: Value )
        m

type MOffset.Family m = -- {-> array <-}
    Family.Def Unit
        ( a :: Array, offset :: Value )
        ( out :: Value )
        m

type MFit.Family m = -- {-> array <-}
    Family.Def Unit
        ( a :: Array, low :: Value, high :: Value )
        ( out :: Value )
        m

type MFft.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, h :: AudioBin )
        ( out :: Value )
        m

type MSetSmooth.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, smooth :: Value )
        ( out :: Unit )
        m

type MSetCutoff.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, cutoff :: Value )
        ( out :: Unit )
        m

type MSetBins.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, numBins :: Value )
        ( out :: Unit )
        m

type MSetScale.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, scale :: Value )
        ( out :: Unit )
        m

type MHide.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, ? )
        ( out :: Unit )
        m

type MShow.Family m = -- {-> audio <-}
    Family.Def Unit
        ( a :: Audio, ? )
        ( out :: Unit )
        m

type MOut.Family m = -- {-> out <-}
    Family.Def Unit
        ( what :: Texture, where :: Output )
        ( out :: Unit )
        m




MNoise.fn :: forall m. MNoise.Family m
MNoise.fn = -- {-> source <-}
    Family.def
        unit
        { scale : 10, offset : 0.1 }
        { out : ? }
    $ Fn.make $ pure unit

MVoronoi.fn :: forall m. MVoronoi.Family m
MVoronoi.fn = -- {-> source <-}
    Family.def
        unit
        { scale : 5, speed : 0.3, blending : 0.3 }
        { out : ? }
    $ Fn.make $ pure unit

MOsc.fn :: forall m. MOsc.Family m
MOsc.fn = -- {-> source <-}
    Family.def
        unit
        { frequency : 60, sync : 0.1, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MShape.fn :: forall m. MShape.Family m
MShape.fn = -- {-> source <-}
    Family.def
        unit
        { sides : 60, radius : 0.3, smoothing : 0.01 }
        { out : ? }
    $ Fn.make $ pure unit

MGradient.fn :: forall m. MGradient.Family m
MGradient.fn = -- {-> source <-}
    Family.def
        unit
        { speed : ? }
        { out : ? }
    $ Fn.make $ pure unit

MSrc.fn :: forall m. MSrc.Family m
MSrc.fn = -- {-> source <-}
    Family.def
        unit
        { tex : ? }
        { out : ? }
    $ Fn.make $ pure unit

MSolid.fn :: forall m. MSolid.Family m
MSolid.fn = -- {-> source <-}
    Family.def
        unit
        { r : ?, g : ?, b : ?, a : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MSrc.fn :: forall m. MSrc.Family m
MSrc.fn = -- {-> source <-}
    Family.def
        unit
        { src : ? }
        { out : ? }
    $ Fn.make $ pure unit

MPrev.fn :: forall m. MPrev.Family m
MPrev.fn = -- {-> source <-}
    Family.def
        unit
        { ? }
        { out : ? }
    $ Fn.make $ pure unit

MRotate.fn :: forall m. MRotate.Family m
MRotate.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, angle : 10, speed : ? }
        { out : ? }
    $ Fn.make $ pure unit

MScale.fn :: forall m. MScale.Family m
MScale.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, amount : 1.5, xMult : 1, yMult : 1, offsetX : 0.5, offsetY : 0.5 }
        { out : ? }
    $ Fn.make $ pure unit

MPixelate.fn :: forall m. MPixelate.Family m
MPixelate.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, pixelX : 20, pixelY : 20 }
        { out : ? }
    $ Fn.make $ pure unit

MRepeat.fn :: forall m. MRepeat.Family m
MRepeat.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, repeatX : 3, repeatY : 3, offsetX : ?, offsetY : ? }
        { out : ? }
    $ Fn.make $ pure unit

MRepeatX.fn :: forall m. MRepeatX.Family m
MRepeatX.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, reps : 3, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MRepeatY.fn :: forall m. MRepeatY.Family m
MRepeatY.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, reps : 3, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MKaleid.fn :: forall m. MKaleid.Family m
MKaleid.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, nSides : 3 }
        { out : ? }
    $ Fn.make $ pure unit

MScroll.fn :: forall m. MScroll.Family m
MScroll.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, scrollX : 0.5, scrollY : 0.5, speedX : ?, speedY : ? }
        { out : ? }
    $ Fn.make $ pure unit

MScrollX.fn :: forall m. MScrollX.Family m
MScrollX.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, scrollX : 0.5, speed : ? }
        { out : ? }
    $ Fn.make $ pure unit

MScrollY.fn :: forall m. MScrollY.Family m
MScrollY.fn = -- {-> geometry <-}
    Family.def
        unit
        { what : ?, scrollY : 0.5, speed : ? }
        { out : ? }
    $ Fn.make $ pure unit

MPosterize.fn :: forall m. MPosterize.Family m
MPosterize.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, bins : 3, gamma : 0.6 }
        { out : ? }
    $ Fn.make $ pure unit

MShift.fn :: forall m. MShift.Family m
MShift.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, r : 0.5, g : ?, b : ?, a : ? }
        { out : ? }
    $ Fn.make $ pure unit

MInvert.fn :: forall m. MInvert.Family m
MInvert.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, amount : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MContrast.fn :: forall m. MContrast.Family m
MContrast.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, amount : 1.6 }
        { out : ? }
    $ Fn.make $ pure unit

MBrightness.fn :: forall m. MBrightness.Family m
MBrightness.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, amount : 0.4 }
        { out : ? }
    $ Fn.make $ pure unit

MLuma.fn :: forall m. MLuma.Family m
MLuma.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, treshold : 0.5, tolerance : 0.1 }
        { out : ? }
    $ Fn.make $ pure unit

MTresh.fn :: forall m. MTresh.Family m
MTresh.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, treshold : 0.5, tolerance : 0.1 }
        { out : ? }
    $ Fn.make $ pure unit

MColor.fn :: forall m. MColor.Family m
MColor.fn = -- {-> color <-}
    Family.def
        unit
        { r : 1, g : 1, b : 1, a : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MSaturate.fn :: forall m. MSaturate.Family m
MSaturate.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, amount : 2 }
        { out : ? }
    $ Fn.make $ pure unit

MHue.fn :: forall m. MHue.Family m
MHue.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, hue : 0.4 }
        { out : ? }
    $ Fn.make $ pure unit

MColorama.fn :: forall m. MColorama.Family m
MColorama.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, amount : 0.005 }
        { out : ? }
    $ Fn.make $ pure unit

MSum.fn :: forall m. MSum.Family m
MSum.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, ? }
        { out : ? }
    $ Fn.make $ pure unit

MR.fn :: forall m. MR.Family m
MR.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, scale : 1, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MG.fn :: forall m. MG.Family m
MG.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, scale : 1, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MB.fn :: forall m. MB.Family m
MB.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, scale : 1, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MA.fn :: forall m. MA.Family m
MA.fn = -- {-> color <-}
    Family.def
        unit
        { what : ?, scale : 1, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MAdd.fn :: forall m. MAdd.Family m
MAdd.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MSub.fn :: forall m. MSub.Family m
MSub.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MLayer.fn :: forall m. MLayer.Family m
MLayer.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MBlend.fn :: forall m. MBlend.Family m
MBlend.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 0.5 }
        { out : ? }
    $ Fn.make $ pure unit

MMult.fn :: forall m. MMult.Family m
MMult.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MDiff.fn :: forall m. MDiff.Family m
MDiff.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ? }
        { out : ? }
    $ Fn.make $ pure unit

MMask.fn :: forall m. MMask.Family m
MMask.fn = -- {-> blend <-}
    Family.def
        unit
        { what : ?, with : ? }
        { out : ? }
    $ Fn.make $ pure unit

MModulateRepeat.fn :: forall m. MModulateRepeat.Family m
MModulateRepeat.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, repeatX : 3, repeatY : 3, offsetX : 0.5, offsetY : 0.5 }
        { out : ? }
    $ Fn.make $ pure unit

MModulateRepeatX.fn :: forall m. MModulateRepeatX.Family m
MModulateRepeatX.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, reps : 3, offset : 0.5 }
        { out : ? }
    $ Fn.make $ pure unit

MModulateRepeatY.fn :: forall m. MModulateRepeatY.Family m
MModulateRepeatY.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, reps : 3, offset : 0.5 }
        { out : ? }
    $ Fn.make $ pure unit

MModulateKaleid.fn :: forall m. MModulateKaleid.Family m
MModulateKaleid.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, nSides : 3 }
        { out : ? }
    $ Fn.make $ pure unit

MModulateScrollX.fn :: forall m. MModulateScrollX.Family m
MModulateScrollX.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, scrollX : 0.5, speed : ? }
        { out : ? }
    $ Fn.make $ pure unit

MModulateScrollY.fn :: forall m. MModulateScrollY.Family m
MModulateScrollY.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, scrollY : 0.5, speed : ? }
        { out : ? }
    $ Fn.make $ pure unit

MModulate.fn :: forall m. MModulate.Family m
MModulate.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 0.1 }
        { out : ? }
    $ Fn.make $ pure unit

MModulateScale.fn :: forall m. MModulateScale.Family m
MModulateScale.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, multiple : 1, offset : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MModulatePixelate.fn :: forall m. MModulatePixelate.Family m
MModulatePixelate.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, multiple : 10, offset : 3 }
        { out : ? }
    $ Fn.make $ pure unit

MModulateRotate.fn :: forall m. MModulateRotate.Family m
MModulateRotate.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, multiple : 1, offset : ? }
        { out : ? }
    $ Fn.make $ pure unit

MModulateHue.fn :: forall m. MModulateHue.Family m
MModulateHue.fn = -- {-> modulate <-}
    Family.def
        unit
        { what : ?, with : ?, amount : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MRender.fn :: forall m. MRender.Family m
MRender.fn = -- {-> synth <-}
    Family.def
        unit
        { from : All }
        { out : ? }
    $ Fn.make $ pure unit

MUpdate.fn :: forall m. MUpdate.Family m
MUpdate.fn = -- {-> synth <-}
    Family.def
        unit
        { fn : ? }
        { out : ? }
    $ Fn.make $ pure unit

MSetResolution.fn :: forall m. MSetResolution.Family m
MSetResolution.fn = -- {-> synth <-}
    Family.def
        unit
        { width : ?, height : ? }
        { out : ? }
    $ Fn.make $ pure unit

MHush.fn :: forall m. MHush.Family m
MHush.fn = -- {-> synth <-}
    Family.def
        unit
        { Unit : ? }
        { out : ? }
    $ Fn.make $ pure unit

MSetFunction.fn :: forall m. MSetFunction.Family m
MSetFunction.fn = -- {-> synth <-}
    Family.def
        unit
        { fn : ? }
        { out : ? }
    $ Fn.make $ pure unit

MSpeed.fn :: forall m. MSpeed.Family m
MSpeed.fn = -- {-> synth <-}
    Family.def
        unit
        { v : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MBpm.fn :: forall m. MBpm.Family m
MBpm.fn = -- {-> synth <-}
    Family.def
        unit
        { v : 30 }
        { out : ? }
    $ Fn.make $ pure unit

MWidth.fn :: forall m. MWidth.Family m
MWidth.fn = -- {-> synth <-}
    Family.def
        unit
        { }
        { out : ? }
    $ Fn.make $ pure unit

MHeight.fn :: forall m. MHeight.Family m
MHeight.fn = -- {-> synth <-}
    Family.def
        unit
        { }
        { out : ? }
    $ Fn.make $ pure unit

MPi.fn :: forall m. MPi.Family m
MPi.fn = -- {-> synth <-}
    Family.def
        unit
        { }
        { out : ? }
    $ Fn.make $ pure unit

MTime.fn :: forall m. MTime.Family m
MTime.fn = -- {-> synth <-}
    Family.def
        unit
        { }
        { out : ? }
    $ Fn.make $ pure unit

MMouse.fn :: forall m. MMouse.Family m
MMouse.fn = -- {-> synth <-}
    Family.def
        unit
        { }
        { out : ? }
    $ Fn.make $ pure unit

MInitCam.fn :: forall m. MInitCam.Family m
MInitCam.fn = -- {-> extsource <-}
    Family.def
        unit
        { where : ?, index : ? }
        { out : ? }
    $ Fn.make $ pure unit

MInitImage.fn :: forall m. MInitImage.Family m
MInitImage.fn = -- {-> extsource <-}
    Family.def
        unit
        { where : ?, url : ? }
        { out : ? }
    $ Fn.make $ pure unit

MInitVideo.fn :: forall m. MInitVideo.Family m
MInitVideo.fn = -- {-> extsource <-}
    Family.def
        unit
        { where : ?, url : ? }
        { out : ? }
    $ Fn.make $ pure unit

MInit.fn :: forall m. MInit.Family m
MInit.fn = -- {-> extsource <-}
    Family.def
        unit
        { where : ? }
        { out : ? }
    $ Fn.make $ pure unit

MInitStream.fn :: forall m. MInitStream.Family m
MInitStream.fn = -- {-> extsource <-}
    Family.def
        unit
        { where : ?, ? }
        { out : ? }
    $ Fn.make $ pure unit

MInitScreen.fn :: forall m. MInitScreen.Family m
MInitScreen.fn = -- {-> extsource <-}
    Family.def
        unit
        { where : ? }
        { out : ? }
    $ Fn.make $ pure unit

MFast.fn :: forall m. MFast.Family m
MFast.fn = -- {-> array <-}
    Family.def
        unit
        { a : ?, speed : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MSmooth.fn :: forall m. MSmooth.Family m
MSmooth.fn = -- {-> array <-}
    Family.def
        unit
        { a : ?, smooth : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MEase.fn :: forall m. MEase.Family m
MEase.fn = -- {-> array <-}
    Family.def
        unit
        { a : ?, ease : Linear }
        { out : ? }
    $ Fn.make $ pure unit

MOffset.fn :: forall m. MOffset.Family m
MOffset.fn = -- {-> array <-}
    Family.def
        unit
        { a : ?, offset : 0.5 }
        { out : ? }
    $ Fn.make $ pure unit

MFit.fn :: forall m. MFit.Family m
MFit.fn = -- {-> array <-}
    Family.def
        unit
        { a : ?, low : 0, high : 1 }
        { out : ? }
    $ Fn.make $ pure unit

MFft.fn :: forall m. MFft.Family m
MFft.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, h : ? }
        { out : ? }
    $ Fn.make $ pure unit

MSetSmooth.fn :: forall m. MSetSmooth.Family m
MSetSmooth.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, smooth : 0.4 }
        { out : ? }
    $ Fn.make $ pure unit

MSetCutoff.fn :: forall m. MSetCutoff.Family m
MSetCutoff.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, cutoff : 2 }
        { out : ? }
    $ Fn.make $ pure unit

MSetBins.fn :: forall m. MSetBins.Family m
MSetBins.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, numBins : 4 }
        { out : ? }
    $ Fn.make $ pure unit

MSetScale.fn :: forall m. MSetScale.Family m
MSetScale.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, scale : 10 }
        { out : ? }
    $ Fn.make $ pure unit

MHide.fn :: forall m. MHide.Family m
MHide.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, ? }
        { out : ? }
    $ Fn.make $ pure unit

MShow.fn :: forall m. MShow.Family m
MShow.fn = -- {-> audio <-}
    Family.def
        unit
        { a : ?, ? }
        { out : ? }
    $ Fn.make $ pure unit

MOut.fn :: forall m. MOut.Family m
MOut.fn = -- {-> out <-}
    Family.def
        unit
        { what : ?, where : ? }
        { out : ? }
    $ Fn.make $ pure unit




type Toolkit m
    = Toolkit Unit
        ( noise :: MNoise.Family -- {-> source <-}
        , voronoi :: MVoronoi.Family -- {-> source <-}
        , osc :: MOsc.Family -- {-> source <-}
        , shape :: MShape.Family -- {-> source <-}
        , gradient :: MGradient.Family -- {-> source <-}
        , src :: MSrc.Family -- {-> source <-}
        , solid :: MSolid.Family -- {-> source <-}
        , src :: MSrc.Family -- {-> source <-}
        , prev :: MPrev.Family -- {-> source <-}
        , rotate :: MRotate.Family -- {-> geometry <-}
        , scale :: MScale.Family -- {-> geometry <-}
        , pixelate :: MPixelate.Family -- {-> geometry <-}
        , repeat :: MRepeat.Family -- {-> geometry <-}
        , repeatX :: MRepeatX.Family -- {-> geometry <-}
        , repeatY :: MRepeatY.Family -- {-> geometry <-}
        , kaleid :: MKaleid.Family -- {-> geometry <-}
        , scroll :: MScroll.Family -- {-> geometry <-}
        , scrollX :: MScrollX.Family -- {-> geometry <-}
        , scrollY :: MScrollY.Family -- {-> geometry <-}
        , posterize :: MPosterize.Family -- {-> color <-}
        , shift :: MShift.Family -- {-> color <-}
        , invert :: MInvert.Family -- {-> color <-}
        , contrast :: MContrast.Family -- {-> color <-}
        , brightness :: MBrightness.Family -- {-> color <-}
        , luma :: MLuma.Family -- {-> color <-}
        , tresh :: MTresh.Family -- {-> color <-}
        , color :: MColor.Family -- {-> color <-}
        , saturate :: MSaturate.Family -- {-> color <-}
        , hue :: MHue.Family -- {-> color <-}
        , colorama :: MColorama.Family -- {-> color <-}
        , sum :: MSum.Family -- {-> color <-}
        , r :: MR.Family -- {-> color <-}
        , g :: MG.Family -- {-> color <-}
        , b :: MB.Family -- {-> color <-}
        , a :: MA.Family -- {-> color <-}
        , add :: MAdd.Family -- {-> blend <-}
        , sub :: MSub.Family -- {-> blend <-}
        , layer :: MLayer.Family -- {-> blend <-}
        , blend :: MBlend.Family -- {-> blend <-}
        , mult :: MMult.Family -- {-> blend <-}
        , diff :: MDiff.Family -- {-> blend <-}
        , mask :: MMask.Family -- {-> blend <-}
        , modulateRepeat :: MModulateRepeat.Family -- {-> modulate <-}
        , modulateRepeatX :: MModulateRepeatX.Family -- {-> modulate <-}
        , modulateRepeatY :: MModulateRepeatY.Family -- {-> modulate <-}
        , modulateKaleid :: MModulateKaleid.Family -- {-> modulate <-}
        , modulateScrollX :: MModulateScrollX.Family -- {-> modulate <-}
        , modulateScrollY :: MModulateScrollY.Family -- {-> modulate <-}
        , modulate :: MModulate.Family -- {-> modulate <-}
        , modulateScale :: MModulateScale.Family -- {-> modulate <-}
        , modulatePixelate :: MModulatePixelate.Family -- {-> modulate <-}
        , modulateRotate :: MModulateRotate.Family -- {-> modulate <-}
        , modulateHue :: MModulateHue.Family -- {-> modulate <-}
        , render :: MRender.Family -- {-> synth <-}
        , update :: MUpdate.Family -- {-> synth <-}
        , setResolution :: MSetResolution.Family -- {-> synth <-}
        , hush :: MHush.Family -- {-> synth <-}
        , setFunction :: MSetFunction.Family -- {-> synth <-}
        , speed :: MSpeed.Family -- {-> synth <-}
        , bpm :: MBpm.Family -- {-> synth <-}
        , width :: MWidth.Family -- {-> synth <-}
        , height :: MHeight.Family -- {-> synth <-}
        , pi :: MPi.Family -- {-> synth <-}
        , time :: MTime.Family -- {-> synth <-}
        , mouse :: MMouse.Family -- {-> synth <-}
        , initCam :: MInitCam.Family -- {-> extsource <-}
        , initImage :: MInitImage.Family -- {-> extsource <-}
        , initVideo :: MInitVideo.Family -- {-> extsource <-}
        , init :: MInit.Family -- {-> extsource <-}
        , initStream :: MInitStream.Family -- {-> extsource <-}
        , initScreen :: MInitScreen.Family -- {-> extsource <-}
        , fast :: MFast.Family -- {-> array <-}
        , smooth :: MSmooth.Family -- {-> array <-}
        , ease :: MEase.Family -- {-> array <-}
        , offset :: MOffset.Family -- {-> array <-}
        , fit :: MFit.Family -- {-> array <-}
        , fft :: MFft.Family -- {-> audio <-}
        , setSmooth :: MSetSmooth.Family -- {-> audio <-}
        , setCutoff :: MSetCutoff.Family -- {-> audio <-}
        , setBins :: MSetBins.Family -- {-> audio <-}
        , setScale :: MSetScale.Family -- {-> audio <-}
        , hide :: MHide.Family -- {-> audio <-}
        , show :: MShow.Family -- {-> audio <-}
        , out :: MOut.Family -- {-> out <-}
        )


type Toolkit m
    = Toolkit Unit
        ( noise :: -- {-> source <-}
            Family.Def Unit
                ( scale :: Value, offset :: Value )
                ( out :: Texture )
                m
        , voronoi :: -- {-> source <-}
            Family.Def Unit
                ( scale :: Value, speed :: Value, blending :: Value )
                ( out :: Texture )
                m
        , osc :: -- {-> source <-}
            Family.Def Unit
                ( frequency :: Value, sync :: Value, offset :: Value )
                ( out :: Texture )
                m
        , shape :: -- {-> source <-}
            Family.Def Unit
                ( sides :: Value, radius :: Value, smoothing :: Value )
                ( out :: Texture )
                m
        , gradient :: -- {-> source <-}
            Family.Def Unit
                ( speed :: Value )
                ( out :: Texture )
                m
        , src :: -- {-> source <-}
            Family.Def Unit
                ( tex :: Texture )
                ( out :: Texture )
                m
        , solid :: -- {-> source <-}
            Family.Def Unit
                ( r :: Value, g :: Value, b :: Value, a :: Value )
                ( out :: Texture )
                m
        , src :: -- {-> source <-}
            Family.Def Unit
                ( src :: Source )
                ( out :: Texture )
                m
        , prev :: -- {-> source <-}
            Family.Def Unit
                ( ? )
                ( out :: Texture )
                m
        , rotate :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, angle :: Value, speed :: Value )
                ( out :: Texture )
                m
        , scale :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, amount :: Value, xMult :: Value, yMult :: Value, offsetX :: Value, offsetY :: Value )
                ( out :: Texture )
                m
        , pixelate :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, pixelX :: Value, pixelY :: Value )
                ( out :: Texture )
                m
        , repeat :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, repeatX :: Value, repeatY :: Value, offsetX :: Value, offsetY :: Value )
                ( out :: Texture )
                m
        , repeatX :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, reps :: Value, offset :: Value )
                ( out :: Texture )
                m
        , repeatY :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, reps :: Value, offset :: Value )
                ( out :: Texture )
                m
        , kaleid :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, nSides :: Value )
                ( out :: Texture )
                m
        , scroll :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, scrollX :: Value, scrollY :: Value, speedX :: Value, speedY :: Value )
                ( out :: Texture )
                m
        , scrollX :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, scrollX :: Value, speed :: Value )
                ( out :: Texture )
                m
        , scrollY :: -- {-> geometry <-}
            Family.Def Unit
                ( what :: Texture, scrollY :: Value, speed :: Value )
                ( out :: Texture )
                m
        , posterize :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, bins :: Value, gamma :: Value )
                ( out :: Texture )
                m
        , shift :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, r :: Value, g :: Value, b :: Value, a :: Value )
                ( out :: Texture )
                m
        , invert :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , contrast :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , brightness :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , luma :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, treshold :: Value, tolerance :: Value )
                ( out :: Texture )
                m
        , tresh :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, treshold :: Value, tolerance :: Value )
                ( out :: Texture )
                m
        , color :: -- {-> color <-}
            Family.Def Unit
                ( r :: Value, g :: Value, b :: Value, a :: Value )
                ( out :: Texture )
                m
        , saturate :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , hue :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, hue :: Value )
                ( out :: Texture )
                m
        , colorama :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , sum :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, ? )
                ( out :: Texture )
                m
        , r :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, scale :: Value, offset :: Value )
                ( out :: Texture )
                m
        , g :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, scale :: Value, offset :: Value )
                ( out :: Texture )
                m
        , b :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, scale :: Value, offset :: Value )
                ( out :: Texture )
                m
        , a :: -- {-> color <-}
            Family.Def Unit
                ( what :: Texture, scale :: Value, offset :: Value )
                ( out :: Texture )
                m
        , add :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , sub :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , layer :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , blend :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , mult :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , diff :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture )
                ( out :: Texture )
                m
        , mask :: -- {-> blend <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture )
                ( out :: Texture )
                m
        , modulateRepeat :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, repeatX :: Value, repeatY :: Value, offsetX :: Value, offsetY :: Value )
                ( out :: Texture )
                m
        , modulateRepeatX :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, reps :: Value, offset :: Value )
                ( out :: Texture )
                m
        , modulateRepeatY :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, reps :: Value, offset :: Value )
                ( out :: Texture )
                m
        , modulateKaleid :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, nSides :: Value )
                ( out :: Texture )
                m
        , modulateScrollX :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, scrollX :: Value, speed :: Value )
                ( out :: Texture )
                m
        , modulateScrollY :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, scrollY :: Value, speed :: Value )
                ( out :: Texture )
                m
        , modulate :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , modulateScale :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, multiple :: Value, offset :: Value )
                ( out :: Texture )
                m
        , modulatePixelate :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, multiple :: Value, offset :: Value )
                ( out :: Texture )
                m
        , modulateRotate :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, multiple :: Value, offset :: Value )
                ( out :: Texture )
                m
        , modulateHue :: -- {-> modulate <-}
            Family.Def Unit
                ( what :: Texture, with :: Texture, amount :: Value )
                ( out :: Texture )
                m
        , render :: -- {-> synth <-}
            Family.Def Unit
                ( from :: From )
                ( out :: Unit )
                m
        , update :: -- {-> synth <-}
            Family.Def Unit
                ( fn :: UpdateFn )
                ( out :: Unit )
                m
        , setResolution :: -- {-> synth <-}
            Family.Def Unit
                ( width :: Value, height :: Value )
                ( out :: Unit )
                m
        , hush :: -- {-> synth <-}
            Family.Def Unit
                ( Unit :: Unknown )
                ( out :: Unit )
                m
        , setFunction :: -- {-> synth <-}
            Family.Def Unit
                ( fn :: GlslFn )
                ( out :: Unit )
                m
        , speed :: -- {-> synth <-}
            Family.Def Unit
                ( v :: Value )
                ( out :: Unit )
                m
        , bpm :: -- {-> synth <-}
            Family.Def Unit
                ( v :: Value )
                ( out :: Unit )
                m
        , width :: -- {-> synth <-}
            Family.Def Unit
                ( )
                ( out :: Value )
                m
        , height :: -- {-> synth <-}
            Family.Def Unit
                ( )
                ( out :: Value )
                m
        , pi :: -- {-> synth <-}
            Family.Def Unit
                ( )
                ( out :: Value )
                m
        , time :: -- {-> synth <-}
            Family.Def Unit
                ( )
                ( out :: Value )
                m
        , mouse :: -- {-> synth <-}
            Family.Def Unit
                ( )
                ( out :: Value )
                m
        , initCam :: -- {-> extsource <-}
            Family.Def Unit
                ( where :: Source, index :: Value )
                ( out :: Unit )
                m
        , initImage :: -- {-> extsource <-}
            Family.Def Unit
                ( where :: Source, url :: String )
                ( out :: Unit )
                m
        , initVideo :: -- {-> extsource <-}
            Family.Def Unit
                ( where :: Source, url :: String )
                ( out :: Unit )
                m
        , init :: -- {-> extsource <-}
            Family.Def Unit
                ( where :: SourceOptions )
                ( out :: Unit )
                m
        , initStream :: -- {-> extsource <-}
            Family.Def Unit
                ( where :: Source, ? )
                ( out :: Unit )
                m
        , initScreen :: -- {-> extsource <-}
            Family.Def Unit
                ( where :: Source )
                ( out :: Unit )
                m
        , fast :: -- {-> array <-}
            Family.Def Unit
                ( a :: Array, speed :: Value )
                ( out :: Value )
                m
        , smooth :: -- {-> array <-}
            Family.Def Unit
                ( a :: Array, smooth :: Value )
                ( out :: Value )
                m
        , ease :: -- {-> array <-}
            Family.Def Unit
                ( a :: Array, ease :: Ease )
                ( out :: Value )
                m
        , offset :: -- {-> array <-}
            Family.Def Unit
                ( a :: Array, offset :: Value )
                ( out :: Value )
                m
        , fit :: -- {-> array <-}
            Family.Def Unit
                ( a :: Array, low :: Value, high :: Value )
                ( out :: Value )
                m
        , fft :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, h :: AudioBin )
                ( out :: Value )
                m
        , setSmooth :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, smooth :: Value )
                ( out :: Unit )
                m
        , setCutoff :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, cutoff :: Value )
                ( out :: Unit )
                m
        , setBins :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, numBins :: Value )
                ( out :: Unit )
                m
        , setScale :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, scale :: Value )
                ( out :: Unit )
                m
        , hide :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, ? )
                ( out :: Unit )
                m
        , show :: -- {-> audio <-}
            Family.Def Unit
                ( a :: Audio, ? )
                ( out :: Unit )
                m
        , out :: -- {-> out <-}
            Family.Def Unit
                ( what :: Texture, where :: Output )
                ( out :: Unit )
                m
        )


toolkit =
    Toolkit.from "hydra"
        { noise : -- {-> source <-}
            Family.def
                unit
                { scale : 10, offset : 0.1 }
                { out : ? }
                $ Fn.make $ pure unit
        , voronoi : -- {-> source <-}
            Family.def
                unit
                { scale : 5, speed : 0.3, blending : 0.3 }
                { out : ? }
                $ Fn.make $ pure unit
        , osc : -- {-> source <-}
            Family.def
                unit
                { frequency : 60, sync : 0.1, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , shape : -- {-> source <-}
            Family.def
                unit
                { sides : 60, radius : 0.3, smoothing : 0.01 }
                { out : ? }
                $ Fn.make $ pure unit
        , gradient : -- {-> source <-}
            Family.def
                unit
                { speed : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , src : -- {-> source <-}
            Family.def
                unit
                { tex : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , solid : -- {-> source <-}
            Family.def
                unit
                { r : ?, g : ?, b : ?, a : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , src : -- {-> source <-}
            Family.def
                unit
                { src : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , prev : -- {-> source <-}
            Family.def
                unit
                { ? }
                { out : ? }
                $ Fn.make $ pure unit
        , rotate : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, angle : 10, speed : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , scale : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, amount : 1.5, xMult : 1, yMult : 1, offsetX : 0.5, offsetY : 0.5 }
                { out : ? }
                $ Fn.make $ pure unit
        , pixelate : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, pixelX : 20, pixelY : 20 }
                { out : ? }
                $ Fn.make $ pure unit
        , repeat : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, repeatX : 3, repeatY : 3, offsetX : ?, offsetY : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , repeatX : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, reps : 3, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , repeatY : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, reps : 3, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , kaleid : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, nSides : 3 }
                { out : ? }
                $ Fn.make $ pure unit
        , scroll : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, scrollX : 0.5, scrollY : 0.5, speedX : ?, speedY : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , scrollX : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, scrollX : 0.5, speed : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , scrollY : -- {-> geometry <-}
            Family.def
                unit
                { what : ?, scrollY : 0.5, speed : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , posterize : -- {-> color <-}
            Family.def
                unit
                { what : ?, bins : 3, gamma : 0.6 }
                { out : ? }
                $ Fn.make $ pure unit
        , shift : -- {-> color <-}
            Family.def
                unit
                { what : ?, r : 0.5, g : ?, b : ?, a : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , invert : -- {-> color <-}
            Family.def
                unit
                { what : ?, amount : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , contrast : -- {-> color <-}
            Family.def
                unit
                { what : ?, amount : 1.6 }
                { out : ? }
                $ Fn.make $ pure unit
        , brightness : -- {-> color <-}
            Family.def
                unit
                { what : ?, amount : 0.4 }
                { out : ? }
                $ Fn.make $ pure unit
        , luma : -- {-> color <-}
            Family.def
                unit
                { what : ?, treshold : 0.5, tolerance : 0.1 }
                { out : ? }
                $ Fn.make $ pure unit
        , tresh : -- {-> color <-}
            Family.def
                unit
                { what : ?, treshold : 0.5, tolerance : 0.1 }
                { out : ? }
                $ Fn.make $ pure unit
        , color : -- {-> color <-}
            Family.def
                unit
                { r : 1, g : 1, b : 1, a : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , saturate : -- {-> color <-}
            Family.def
                unit
                { what : ?, amount : 2 }
                { out : ? }
                $ Fn.make $ pure unit
        , hue : -- {-> color <-}
            Family.def
                unit
                { what : ?, hue : 0.4 }
                { out : ? }
                $ Fn.make $ pure unit
        , colorama : -- {-> color <-}
            Family.def
                unit
                { what : ?, amount : 0.005 }
                { out : ? }
                $ Fn.make $ pure unit
        , sum : -- {-> color <-}
            Family.def
                unit
                { what : ?, ? }
                { out : ? }
                $ Fn.make $ pure unit
        , r : -- {-> color <-}
            Family.def
                unit
                { what : ?, scale : 1, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , g : -- {-> color <-}
            Family.def
                unit
                { what : ?, scale : 1, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , b : -- {-> color <-}
            Family.def
                unit
                { what : ?, scale : 1, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , a : -- {-> color <-}
            Family.def
                unit
                { what : ?, scale : 1, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , add : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , sub : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , layer : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , blend : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 0.5 }
                { out : ? }
                $ Fn.make $ pure unit
        , mult : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , diff : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , mask : -- {-> blend <-}
            Family.def
                unit
                { what : ?, with : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateRepeat : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, repeatX : 3, repeatY : 3, offsetX : 0.5, offsetY : 0.5 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateRepeatX : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, reps : 3, offset : 0.5 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateRepeatY : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, reps : 3, offset : 0.5 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateKaleid : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, nSides : 3 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateScrollX : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, scrollX : 0.5, speed : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateScrollY : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, scrollY : 0.5, speed : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , modulate : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 0.1 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateScale : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, multiple : 1, offset : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulatePixelate : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, multiple : 10, offset : 3 }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateRotate : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, multiple : 1, offset : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , modulateHue : -- {-> modulate <-}
            Family.def
                unit
                { what : ?, with : ?, amount : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , render : -- {-> synth <-}
            Family.def
                unit
                { from : All }
                { out : ? }
                $ Fn.make $ pure unit
        , update : -- {-> synth <-}
            Family.def
                unit
                { fn : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , setResolution : -- {-> synth <-}
            Family.def
                unit
                { width : ?, height : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , hush : -- {-> synth <-}
            Family.def
                unit
                { Unit : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , setFunction : -- {-> synth <-}
            Family.def
                unit
                { fn : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , speed : -- {-> synth <-}
            Family.def
                unit
                { v : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , bpm : -- {-> synth <-}
            Family.def
                unit
                { v : 30 }
                { out : ? }
                $ Fn.make $ pure unit
        , width : -- {-> synth <-}
            Family.def
                unit
                { }
                { out : ? }
                $ Fn.make $ pure unit
        , height : -- {-> synth <-}
            Family.def
                unit
                { }
                { out : ? }
                $ Fn.make $ pure unit
        , pi : -- {-> synth <-}
            Family.def
                unit
                { }
                { out : ? }
                $ Fn.make $ pure unit
        , time : -- {-> synth <-}
            Family.def
                unit
                { }
                { out : ? }
                $ Fn.make $ pure unit
        , mouse : -- {-> synth <-}
            Family.def
                unit
                { }
                { out : ? }
                $ Fn.make $ pure unit
        , initCam : -- {-> extsource <-}
            Family.def
                unit
                { where : ?, index : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , initImage : -- {-> extsource <-}
            Family.def
                unit
                { where : ?, url : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , initVideo : -- {-> extsource <-}
            Family.def
                unit
                { where : ?, url : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , init : -- {-> extsource <-}
            Family.def
                unit
                { where : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , initStream : -- {-> extsource <-}
            Family.def
                unit
                { where : ?, ? }
                { out : ? }
                $ Fn.make $ pure unit
        , initScreen : -- {-> extsource <-}
            Family.def
                unit
                { where : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , fast : -- {-> array <-}
            Family.def
                unit
                { a : ?, speed : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , smooth : -- {-> array <-}
            Family.def
                unit
                { a : ?, smooth : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , ease : -- {-> array <-}
            Family.def
                unit
                { a : ?, ease : Linear }
                { out : ? }
                $ Fn.make $ pure unit
        , offset : -- {-> array <-}
            Family.def
                unit
                { a : ?, offset : 0.5 }
                { out : ? }
                $ Fn.make $ pure unit
        , fit : -- {-> array <-}
            Family.def
                unit
                { a : ?, low : 0, high : 1 }
                { out : ? }
                $ Fn.make $ pure unit
        , fft : -- {-> audio <-}
            Family.def
                unit
                { a : ?, h : ? }
                { out : ? }
                $ Fn.make $ pure unit
        , setSmooth : -- {-> audio <-}
            Family.def
                unit
                { a : ?, smooth : 0.4 }
                { out : ? }
                $ Fn.make $ pure unit
        , setCutoff : -- {-> audio <-}
            Family.def
                unit
                { a : ?, cutoff : 2 }
                { out : ? }
                $ Fn.make $ pure unit
        , setBins : -- {-> audio <-}
            Family.def
                unit
                { a : ?, numBins : 4 }
                { out : ? }
                $ Fn.make $ pure unit
        , setScale : -- {-> audio <-}
            Family.def
                unit
                { a : ?, scale : 10 }
                { out : ? }
                $ Fn.make $ pure unit
        , hide : -- {-> audio <-}
            Family.def
                unit
                { a : ?, ? }
                { out : ? }
                $ Fn.make $ pure unit
        , show : -- {-> audio <-}
            Family.def
                unit
                { a : ?, ? }
                { out : ? }
                $ Fn.make $ pure unit
        , out : -- {-> out <-}
            Family.def
                unit
                { what : ?, where : ? }
                { out : ? }
                $ Fn.make $ pure unit
        }