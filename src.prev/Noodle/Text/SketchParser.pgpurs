module Noodle.Text.SketchParser where

import Prelude

import Type.Proxy (Proxy)
import Data.Foldable (fold, foldl)
import Effect (Effect)

import TryPureScript (h1, h3, p, text, render, code)
import Data.Semigroup.Foldable (class Foldable1)
import Data.CodePoint.Unicode as U
import Data.String.CodePoints (codePointFromChar)
import Data.String.CodeUnits (fromCharArray)
import Data.String.Utils (lines) as String
import Data.Array as Array
import Data.Foldable (foldr)
import Data.String.Pattern
import Data.Tuple (curry, uncurry)
import Data.Maybe (Maybe(..), isJust)

import Parsing (Parser, runParser)
import Parsing.String (char, string, anyChar, anyTill, satisfy)
import Parsing.String.Basic (alphaNum, digit, space, number, intDecimal)
import Parsing.Combinators (optional, option, optionMaybe, between, try, many1Till, sepBy, sepEndBy, sepEndBy1, many1, manyTill_)

import Control.Alt ((<|>))
import Control.Lazy (defer)

import Node.Encoding (Encoding(..))
import Node.FS.Sync (readTextFile, writeTextFile, appendTextFile)

import Data.Array (many, fromFoldable)
import Data.List.NonEmpty (NonEmptyList)
import Data.List.NonEmpty as NEL
import Data.String as String
import Data.String.NonEmpty.CodeUnits as CU
import Data.String.NonEmpty.Internal as StringX
import Data.Tuple as Tuple
import Data.Tuple.Nested ((/\), type (/\))


myFile :: String
myFile =
  """// licensed with CC BY-NC-SA 4.0 https://creativecommons.org/licenses/by-nc-sa/4.0/
// by Mahalia H-R
// IG: mm_hr_

shape(()=>Math.sin/time/+1*3, .5,.01)
.repeat(5,3, ()=>a.fft[0]*2, ()=>a.fft[1]*2)
.scrollY(.5,0.1)
.layer(
  src(o1)
  .mask(o0)
  .luma(.01, .1)
  .invert(.2)
)
.modulate(o1,.02)
.out(o0)

osc(40, 0.09, 0.9)
.color(.9,0,5)
.modulate(osc(10).rotate(1, 0.5))
.rotate(1, 0.2)
.out(o1)

render(o0)
// https://hydra.ojack.xyz/?sketch_id=mahalia_3
"""


test2 =
  """
  osc(40, 0.09, 0.9)
  .color(.9,0,5)
  .modulate(osc(10).rotate(1, 0.5))
  .rotate(1, 0.2)
  .out(o1)
  """


test3 =
  """
  shape(()=>Math.sin/time/+1*3, .5,.01)
  .repeat(5,3, ()=>a.fft[0]*2, ()=>a.fft[1]*2)
  .scrollY(.5,0.1)
  .modulate(o1,.02)
  .out(o0)

  osc(40, 0.09, 0.9)
  .color(.9,0,5)
  .rotate(1, 0.2)
  .out(o1)

  render(o0)
  """

test4 =
  """
  shape(()=>Math.sin/time/+1*3, .5,.01)
  .repeat(5,3, ()=>a.fft[0]*2, ()=>a.fft[1]*2)
  .scrollY(.5,0.1)
  """


test5 =
  """s0.initCam();

a.show();
a.setBins(3);

osc( 60, 0.1, 0 )
"""

test6 =
  """s0.initCam();

a.show();
a.setBins(3);

osc( 60, 0.1, 0 )
.modulate(
  src(s0) , 2
)
.saturate( 0.7 )
.pixelate( 10 , 15 )
.scale(
  () => a.fft[0]
).out( o0 );

render(o0);
"""

data Level
  = Top
  | Arg
  | Tail


derive instance Eq Level


data Expr
    = Token String
    | Num Number
    | Chain
        Level
        { subj :: Maybe String
        , startOp :: String
        , args :: Array Expr
        , tail :: Array { op :: String, args :: Array Expr }
        }
    | FnInline { args :: String, code :: String }
    | Comment String
    | EmptyLine


derive instance Eq Expr


type ModuleName = String


data Script = Script ModuleName (Array Expr)


tokenChar :: Parser String Char
tokenChar = alphaNum


spaceOrEol :: Parser String Char
spaceOrEol = satisfy $ \c -> U.isSpace (codePointFromChar c) || (c == '\n') || (c == '\t')


f1ts :: forall f. Foldable1 f => f Char -> String
f1ts = CU.fromFoldable1 >>> StringX.toString


tokenTill :: forall a. Parser String a -> Parser String (NonEmptyList Char)
tokenTill stopAt =
  many1Till tokenChar stopAt


eol :: Parser String Unit
eol = char '\n' *> pure unit


comment :: Parser String Expr
comment = do
    _ <- many space
    _ <- string "//"
    _ <- many space
    commentText <- many1Till anyChar eol
    pure $ Comment $ f1ts commentText


numberx :: Parser String Expr
numberx = do
    num <- number
    pure $ Num num
  {- do
    idigits <- many digit
    _ <- optional $ char '.'
    fldigits <- many1 digit
    pure $ Num (fromFoldable idigits) (fromFoldable fldigits) -}


beforeArgs :: Parser String Unit
beforeArgs = do
  _ <- many spaceOrEol
  _ <- char '('
  _ <- many spaceOrEol
  pure unit


afterArgs :: Parser String Unit
afterArgs = do
  _ <- many spaceOrEol
  _ <- char ')'
  _ <- many spaceOrEol
  pure unit


separator :: Parser String Unit
separator = do
  _ <- many spaceOrEol
  _ <- char ','
  _ <- many spaceOrEol
  pure unit


chain :: Level -> Parser String Expr
chain level = do
    _ <- many spaceOrEol
    mbSubj <- optionMaybe $ try $ do
        subj <- many1 tokenChar
        _ <- many space
        _ <- char '.'
        pure subj
    startOp <- many1 tokenChar
    args <- between beforeArgs afterArgs $ sepBy (expr Arg) separator
    tail <- option [] $ many $ do
        _ <- many spaceOrEol
        _ <- char '.'
        op <- many1 tokenChar
        innerExprs <- between beforeArgs afterArgs $ sepBy (expr Tail) separator
        _ <- many spaceOrEol
        pure $ { op : f1ts op, args : fromFoldable innerExprs }
    _ <- optional $ try $ char ';'
    pure $ Chain
        level
        { subj : f1ts <$> mbSubj
        , startOp : f1ts startOp
        , args : fromFoldable args
        , tail : fromFoldable tail
        }


fnInline :: Parser String Expr
fnInline = do
    _ <- char '('
    args <- many tokenChar
    _ <- char ')'
    _ <- many space
    _ <- string "=>"
    inner <- many1 $ satisfy $ \c -> c /= ',' && c /= ')'
    pure $ FnInline { args : fromCharArray args, code : f1ts inner }


emptyLine :: Parser String Expr
emptyLine = do
    _ <- many space
    eol
    _ <- optional eol
    pure $ EmptyLine


token :: Parser String Expr
token = do
  token <- many1 tokenChar
  pure $ Token $ f1ts token


expr :: Level -> Parser String Expr
expr level =
  try comment
  <|> try fnInline
  <|> try numberx
  <|> try (defer \_ -> chain level)
  <|> try token
  <|> try emptyLine


script :: ModuleName -> Parser String Script
script mn = do
  lines <- many1 $ expr Top
  pure $ Script mn $ fromFoldable lines


traverseExprs :: (Expr -> Expr) -> Script -> Script
traverseExprs f (Script moduleName exprs) =
  Script moduleName $ deeper <$> exprs
  where
    deeper :: Expr -> Expr
    deeper (Chain l { subj, startOp, args, tail }) =
      f $ Chain l { subj, startOp, args : deeper <$> args, tail : mapSubOp deeper <$> tail }
    deeper otherExpr = f otherExpr
    mapSubOp f { op, args } = { op, args : f <$> args }


replacements :: Array (Pattern /\ Replacement)
replacements = -- this helps to fix bracket parsing in `FnInline` without specifically parsing any contents of functions' code
  [ Pattern "sin(time)" /\ Replacement "sin{[time]}"
  ]


prepare :: String -> String
prepare str = foldr (uncurry String.replaceAll) str replacements


fixback :: Script -> Script
fixback = traverseExprs fixExpr
  where
    fixExpr (FnInline { args, code }) =
      FnInline { args, code : foldr (uncurry String.replaceAll) code $ swapPR <$> replacements }
    fixExpr otherExpr = otherExpr
    swapPR (Pattern pattern /\ Replacement replacement) =
      Pattern replacement /\ Replacement pattern


instance Show Expr where
  show = case _ of
    Token str -> "Token [" <> str <> "]"
    Num num -> "Num [" <> show num <> "]"
    Chain _ { subj, startOp, args, tail } ->
      "Chain "
        <> case subj of
          Just s -> "{" <> s <> "} "
          Nothing -> ""
        <> startOp
        <> " [ " <> String.joinWith " , " (show <$> args) <> " ] [ " <>
        (String.joinWith " , " $
          (\{ op, args } ->
            "Next " <> op <> " [ " <> String.joinWith " , " (show <$> args) <> " ] "
          ) <$> tail
        ) <> " ]"
    FnInline { args, code } ->
      "Fn [ " <> args <> " ] [ " <> code <> " ]"
    Comment str ->
      "Comment [" <> str <> " ]"
    EmptyLine ->
      "Empty"


instance Show Script where
  show :: Script -> String
  show (Script _ exprs) =
    String.joinWith "\n" $ show <$> exprs


main :: Effect Unit
main =
  render $ fold
    [ h1 $ text "Test parsing script"

    -- , h3 $ code $ text $ show $ runParser myFile script
    -- , h3 $ code $ text $ show $ runParser test2 script
    -- , h3 $ code $ text $ show $ runParser test3 script
    -- , h3 $ code $ text $ show $ runParser myFile script
    , h3 $ code $ text $ show $ runParser test5 $ script "Module"
    -- , h3 $ code $ text $ show $ runParser "()=>Math.sin(time)+1*3" fnInline
    -- , h3 $ code $ text $ show $ runParser "()=>a.fft[1]*2" fnInline
    -- , h3 $ code $ text $ show $ runParser "shape(()=>Math.sin(time)+1*3)" script
    -- , h3 $ code $ text $ show $ runParser "shape(()=>Math.sin(time)+1*3, .5,.01)" chainStart
    -- , h3 $ code $ text $ show $ runParser "shape()" chainStart
    -- , h3 $ code $ text $ show $ runParser "src(o1)" chainStart
    -- , h3 $ code $ text $ show $ runParser "shape(0.5)" chainStart
    -- , h3 $ code $ text $ show $ runParser "shape(0.5,.2)" chainStart
    -- , h3 $ code $ text $ show $ runParser "shape(0.5,.2, 0.2)" chainStart
    -- , h3 $ code $ text $ show $ runParser "shape(1.0, .5,.01)" chainStart
    -- , h3 $ code $ text $ show $ runParser "shape(5,3, o1, .5,.01)" chainStart
    -- , h3 $ code $ text $ show $ runParser ".repeat(5,3, ()=>a.fft[0]*2, ()=>a.fft[1]*2)" chainContinue
    -- , h3 $ code $ text $ show $ runParser ".repeat(5,3, ()=>a.fft[0]*2, ()=>a.fft[1]*2)" chainContinue
    ]