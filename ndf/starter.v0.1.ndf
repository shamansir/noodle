starter 0.2 0.1
* | bang metro gennum random knob color time letter sum lerp log | shape sketch |
: simple : sum :: <a:Number -> b:Number -> c:Number> => sum:Number {#/0.0}
: simple : log :: <what:Any> => <>
: simple : color :: <r:Number -> g:Number -> b:Number> => color:Color {c/000000}
: simple : time :: <h:Int -> m:Int -> s:Int> => time:Time {t/0s}
: simple : knob :: <min:Number -> max:Number> => number:Number {#/0.0}
: simple : letter :: <code:Number> => letter:Char
: simple : random :: <bang:Bang -> min:Number -> max:Number> => random:Number
: simple : bang :: <> => bang:Bang
: simple : lerp :: <v:Number -> min:Number -> max:Number {#/100.0}> => v:Number {#/0.0}
: simple : metro :: [Metro] <enabled:Bool {b/true} -> period:Time {t/2s}> => bang:Bang
: simple : gennum :: [Gennum] <> => out:Number {#/0.0}
: p5 : shape :: <> => shape:Shape {s/circle}
: p5 : sketch :: <shape:Shape {s/circle} -> wavescount:Number {#/5.0} -> startcolor:Color {c/00000} -> endcolor:Color {c/143636} -> xspasing:Number {#/16} -> amplitude:Number {#/75} -> period:Number {#/500}> => <>
: spreads : nspread :: <min:Number {#/-150.0} -> max:Number {#/150.0} -> count:Number {#/26}> => spread:SpreadN
: spreads : vspread :: <x:SpreadN -> y:SpreadN> => spread:SpreadV
: spreads : cspread :: <red:SpreadN -> green:SpreadN -> blue:SpreadN -> alpha:SpreadN> => color:SpreadC
: spreads : xsshape :: <pos:SpreadN -> color:SpreadC -> size:SpreadV -> angle:SpreadN> => shape:SpreadS
@ gennum : Generates a random number every second
@ sum : Gives a sum of numbers given as inputs
@ log : (TODO) Logs to its body any value that was given in its input
@ color : Returns a color built from R (red), G (green) and B (blue) values. Values are treated in range 0..1, so 1 means full presence of color component and 0 means no presence
@ knob : (TODO) A control that produces a number when you drag it
@ metro : Every period of seconds produces a Bang value on the output, but only if enabled (see first input)
@ lerp : Take a value from `v` input and project it between `min` and `max` values:
@ lerp :     v:0   min:5 max:10 -> 5
@ lerp :     v:0.5 min:5 max:10 -> 7.5
@ lerp :     v:1   min:5 max:10 -> 10
@ lerp :     -----------------------
@ lerp :     v:0   min:0 max:255 -> 0
@ lerp :     v:0.787 min:0 max:255 -> 200.685
@ lerp :     v:1   min:0 max:255 -> 255
@ letter : (TODO) Produce a character using its ASCII code
@ bang : (TODO) Produce a bang when clicked inside the node
@ shape : (TODO) Produce a shape that was selected in the node
@ xsshape : (TODO) Take a spread of positions, a spread of colors, a spread of sizes and a spread of angles and produce a spread of shapes
$ gennum :: /-|
    curState <- State.get
    case _.signal $ unwrap curState of
        Just _ -> pure unit
        Nothing -> do
            sendRandom <- Fn.spawn $ do
                nextRandom <- liftEffect $ random
                Noodle.send _out_out nextRandom
            let genSignal = Signal.every 1000.0 ~> const sendRandom
            State.modify_ $ unwrap >>> _ { signal = Just genSignal } >>> wrap
            Noodle.lift $ Signal.runSignal genSignal |-/
$ metro :: /-|
    enabled <- Noodle.receive _in_enabled
    periodw  <- Noodle.receive _in_period
    let period = unwrap periodw
    curState <- State.get
    if enabled && period.seconds > 0 then do
        case _.cancelPrev $ unwrap curState of
            Just cancelPrev -> Noodle.lift $ cancelPrev
            Nothing -> pure unit

        sendBang <- Fn.spawn $ do
            Noodle.send _out_bang VR.Bang

        let { signal, cancel } = SignalX.every (Int.toNumber period.seconds * 1000.0)
        State.put $ wrap { cancelPrev : Just cancel }
        Noodle.lift $ Signal.runSignal $ signal ~> const sendBang
    else pure unit |-/
$ lerp :: /-|
    v <- Noodle.receive _in_v
    min <- Noodle.receive _in_min
    max <- Noodle.receive _in_max
    Noodle.send _out_v $ min + v * (max - min) |-/
$ random :: /-|
    min <- Noodle.receive _in_min
    max <- Noodle.receive _in_max
    randomVal <- liftEffect Eff.random
    Noodle.send _out_random $ min + (randomVal * (max - min)) |-/
$ sum :: /-|
    a <- Noodle.receive _in_a
    b <- Noodle.receive _in_b
    c <- Noodle.receive _in_c
    Noodle.send _out_sum $ a + b + c |-/
$ time :: /-|
    h <- Noodle.receive _in_h
    m <- Noodle.receive _in_m
    s <- Noodle.receive _in_s
    Noodle.send _out_time $
         VR.Time
            { hours : h
            , minutes : m
            , seconds : s
            } |-/
$ color :: /-|
    r <- Noodle.receive _in_r
    g <- Noodle.receive _in_g
    b <- Noodle.receive _in_b
    Noodle.send _out_color $
        VR.Color
            { r : floor $ r * 255.0
            , g : floor $ g * 255.0
            , b : floor $ b * 255.0
            , a: 255
            } |-/