-- Options --

[(,]\s+(\w+)\s+::\s+(.*)$
$1 :: forall r. $2 -> ElementAttribute ( $1 :: $2 | r ) \n$1 = elmOption (Proxy :: _ "$1")\n\n


-- Methods --

(\w+)(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?$
$1 :: forall m. $3 -> $5 -> $7 -> $9 -> $11 C.NodeId -> BlessedOp m\n$1 $2 $4 $6 $8 $10 $12 $14 nodeId = \n    C.method nodeId "$1" [ C.arg CA.\L$3\E $2, C.arg CA.\L$5\E $4, C.arg CA.\L$7\E $6, C.arg CA.\L$9\E $8, C.arg CA.\L$11\E $10, C.arg CA.\L$13\E $12, C.arg CA.\L$15\E $14 ]\n\n\n
(\s\s->)|(\s,)|(\s{2,10}(?=\snodeId\s\=\s$))|(,\sC\.arg\sCA\.\s)|(\sC\.arg\sCA\.\s)|(,\s\])


-- Properties --

[(,]\s+(\w+)\s+::\s+(.*)?$
$1 :: forall m. C.NodeId -> C.Getter m $2\n$1 = getter (Proxy :: _ "$1") CA.\L$2\E\n\n


-- Events --

[|=]\s+(\w+)(.*)?$
convert $1 = "\L$1\E" /\\ [$2]\n


-- Show --

\s*\|\s(\w+)$
show $1 = \"\L$1\E\"\n
$1 -> \"\L$1\E\"\n
\"\L$1\E\" -> Just $1\n