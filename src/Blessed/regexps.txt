-- Options --

[(,]\s+(\w+)\s+::\s+(.*)$
$1 :: forall r. $2 -> ElementAttribute ( $1 :: $2 | r ) \n$1 = elmOption (Proxy :: _ "$1")\n\n


-- Methods --

(\w+)(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?(?:\s(\w+):(\w+))?$
$1 :: forall m. $3 -> $5 -> $7 -> $9 -> $11 C.NodeId -> BlessedOp m\n$1 $2 $4 $6 $8 $10 $12 $14 nodeId = \n    C.method nodeId "$1" [ C.arg CA.\L$3\E $2, C.arg CA.\L$5\E $4, C.arg CA.\L$7\E $6, C.arg CA.\L$9\E $8, C.arg CA.\L$11\E $10, C.arg CA.\L$13\E $12, C.arg CA.\L$15\E $14 ]\n\n\n
(\s\s->)|(\s,)|(\s{2,10}(?=\snodeId\s\=\s$))|(,\sC\.arg\sCA\.\s)|(\sC\.arg\sCA\.\s)|(,\s\])


-- Properties --

[(,]\s+(\w+)\s+::\s+(.*)?$
$1 :: forall m. C.NodeId -> C.Getter m $2\n$1 = getter (Proxy :: _ "$1") CA.\L$2\E\n\n


-- Events --

[|=]\s+(\w+)(.*)?$
convert $1 = "\L$1\E" /\\ [$2]\n


-- Show / Kinds etc. --

\s*\|\s(\w+)$

show $1 = \"\L$1\E\"\n
$1 -> \"\L$1\E\"\n
\"\L$1\E\" -> Just $1\n
foreign import data $1K :: SubjectKind\n
\L$1\EK :: Proxy $1K\n\L$1\EK = Proxy\n\n

-- BlessedOp.js --

\s+\w+_\s+->\s+\"(\w+)\"$

case '$1':\n    if (!BLESSED_ON) break;\n    blessedObj = blessed.$1(props);\n    break;\n





:: forall m. _


    :: forall (subj :: Subject) (id :: Symbol) m
     . Respresents Element subj id
    => _




    :: forall subj id r e
     . Respresents Element subj id
    => _


:: forall m. C.NodeId

    :: forall subj id m
     . Respresents Element subj id
    => NodeKey subj id _





\w+\n\s+:: forall \(subj :: Subject\) \(id :: Symbol\) state m\n\s+\. Respresents (\w+) subj id\n\s+=> NodeKey subj id -> C.Getter state m (\w+)\n\w+\s=\s+getter\s+\(Proxy\s+::\s+_\s+"(\w+)"\) CA.(\w+)$
$3\n    :: forall (subj :: Subject) (id :: Symbol) state m\n     . C.GetsC $1 subj id "$3" m $2\n    => NodeKey subj id -> C.Getter state m $2\n$3 = getterC (Proxy :: _ "$3") CA.$4



(\w+)\n\s+:: forall \(subj :: Subject\) \(id :: Symbol\) state m\n\s+\. Extends Element subj => Respresents (\w+) subj id\n\s+=> NodeKey subj id -> C.Getter state m (\w+)\n\w+ = E\.\w+$
$1\n    :: forall (subj :: Subject) (id :: Symbol) state m\n     . C.GetsC Element subj id "$1" m $3\n    => C.GetsC $2 subj id "$1" m $3\n    => NodeKey subj id -> C.Getter state m $3\n$1 = E.$1