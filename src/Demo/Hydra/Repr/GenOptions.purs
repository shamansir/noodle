module HydraTk.Repr.GenOptions where

import Prelude

import Data.Maybe (Maybe(..))

import Noodle.Id (family) as Id

import HydraTk.Repr.Wrap
import HydraTk.Repr.State
import HydraTk.Types as HT

import Partial.Unsafe (unsafePartial)

import Noodle.Fn.Shape.Temperament (defaultAlgorithm) as Temperament
import Noodle.Text.NdfFile.Types (EncodedType(..), EncodedValue(..))
import Noodle.Text.NdfFile.FamilyDef.Codegen (class CodegenRepr, class ValueCodegen, mkExpression, familyPascalCase, groupPascalCase, pDefaultFor, pValueFor)
import Noodle.Text.NdfFile.FamilyDef.Codegen (Options(..)) as FCG

import Tidy.Codegen


type GenOptions = FCG.Options StateRepr WrapRepr


genOptions :: GenOptions
genOptions = FCG.Options
    { streprAt : { module_ : "HydraTk.Repr.State", type_ : "StateRepr" }
    , chreprAt : { module_ : "HydraTk.Repr.Wrap", type_ : "WrapRepr" }
    , temperamentAlgorithm : Temperament.defaultAlgorithm
    , monadAt : { module_ : "Effect", type_ : "Effect" }
    , familyModuleName : \fgroup family -> "Hydra" <> "." <> groupPascalCase fgroup <> "." <> familyPascalCase family
    , toolkitModuleName : \_ -> "OUTPUT.Hydra.Gen.Toolkit"
    , pstrepr : pState
    , pchrepr : pWrap
    , infoComment : Just $ \mbSource fgroup family ->
            "Generated by Noodle Codegen from Hydra NDF file. Group :: " <> show fgroup <> ". Family :: " <> show family <> "." <> case mbSource of
            Just src -> "\n\n[[ " <> src.line <> " ]] (#" <> show src.lineIndex <> ")"
            Nothing -> ""
    , tkImports : genericImports
    , familyImports : \familyR ->
        genericImports <> case Id.family familyR of
            "setFunction" ->
                unsafePartial $
                    [ declImport "Noodle.Fn.Signature" [ importTypeAll "Signature" ]
                    ]
            _ -> []
    }
    where
        genericImports = unsafePartial $
            [ declImportAs "HydraTk.Types" [ ] HT.hydraAlias_
            , declImportAs "HydraTk.Repr.Wrap" [ ] wrapAlias_ -- FIXME: included twice
            , declImport "Data.Tuple.Nested" [ importOp "/\\"]
            ]
