module HydraTk.Library.Modulate.ModulateScrollX where

import Prelude

import Data.Newtype (class Newtype)
import Effect (Effect)
import HydraTk.Repr.Wrap (WrapRepr(..))
import Noodle.Fn.Process as Fn
import Noodle.Fn.Process as Noodle
import Noodle.Fn.Shape (I, O)
import Noodle.Fn.Shape as Noodle
import Noodle.Fn.Shape.Temperament (Cold, Hot)
import Noodle.Id as NId
import Noodle.Node as Noodle
import Noodle.Repr.HasFallback (class HasFallback)
import Noodle.Toolkit.Families as Noodle
import Noodle.Toolkit.Family as Family
import Noodle.Toolkit.Family as Noodle
import Type.Data.List (type (:>))
import Type.Data.List.Extra (TNil)
import HydraTk.Types as HT
import HydraTk.Repr.Wrap as HW
import Data.Tuple.Nested ((/\))

{- Generated by Noodle Codegen from Hydra NDF file. Group :: modulate. Family :: modulateScrollX.

[[ : modulate : modulateScrollX :: <what:Texture {EMP T} -> with:Texture {EMP T} -> scrollX:Value {N 0.5} -> speed:Value> => out:Texture {EMP T} /-| out::HT.ModulateWith { <what>, <with> } $ HT.ModScrollX { <scrollX>, <speed> } |-/ ]] (#58) -}

_modulateScrollX :: NId.Family "modulateScrollX"
_modulateScrollX = NId.Family

type Inlets =
  ( I "what" Hot HT.Texture :> I "with" Hot HT.Texture :> I "scrollX" Hot HT.Value
      :> I "speed" Hot HT.Value
      :> TNil
  ) :: Noodle.Inlets

type Outlets = (O "out" HT.Texture :> TNil) :: Noodle.Outlets
type InletsRow = (what :: HT.Texture, with :: HT.Texture, scrollX :: HT.Value, speed :: HT.Value)
type OutletsRow = (out :: HT.Texture)
type Shape = Noodle.Shape Inlets Outlets
newtype State = State Unit
type Process = Noodle.Process State InletsRow OutletsRow WrapRepr Effect
type Node = Noodle.Node "modulateScrollX" State InletsRow OutletsRow WrapRepr Effect
type Family = Noodle.Family "modulateScrollX" State InletsRow OutletsRow WrapRepr Effect
type F = Noodle.F "modulateScrollX" State InletsRow OutletsRow WrapRepr Effect

defaultI :: Record InletsRow
defaultI = { what: HT.Empty, with: HT.Empty, scrollX: HT.Number 0.5, speed: HT.None }

defaultO :: Record OutletsRow
defaultO = { out: HT.Empty }

defaultSt :: State
defaultSt = State unit

_in_what = Noodle.Inlet :: _ "what"
_in_with = Noodle.Inlet :: _ "with"
_in_scrollX = Noodle.Inlet :: _ "scrollX"
_in_speed = Noodle.Inlet :: _ "speed"
_out_out = Noodle.Outlet :: _ "out"

family :: Family
family = Family.make _modulateScrollX defaultSt (Noodle.Shape :: Shape) defaultI defaultO
  modulateScrollXP

makeNode :: Effect Node
makeNode = Family.spawn family

modulateScrollXP :: Process
modulateScrollXP = do
  what <- Fn.receive _in_what
  with <- Fn.receive _in_with
  scrollX <- Fn.receive _in_scrollX
  speed <- Fn.receive _in_speed
  Fn.send _out_out $ HT.ModulateWith { what, with } $ HT.ModScrollX { scrollX, speed }

instance HasFallback State where
  fallback = defaultSt

derive instance Newtype State _
