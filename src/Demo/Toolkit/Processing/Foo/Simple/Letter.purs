module MyToolkit.Simple.Letter where

import Prelude

import Effect (Effect)
import Noodle.Fn.Process as Fn
import Noodle.Fn.Process as Noodle
import Noodle.Fn.Shape (I, O)
import Noodle.Fn.Shape as Noodle
import Noodle.Fn.Shape.Temperament (Cold, Hot)
import Noodle.Id as NId
import Noodle.Node as Noodle
import Noodle.Text.NdfFile.UnitRepr (UnitRepr)
import Noodle.Toolkit.Families as Noodle
import Noodle.Toolkit.Family as Family
import Noodle.Toolkit.Family as Noodle
import Type.Data.List (type (:>))
import Type.Data.List.Extra (TNil)
import Noodle.Text.NdfFile.UnitRepr

{- Generated by Noodle Codegen from NDF file. Group :: simple. Family :: letter.

[[  simple : letter :: <code:Number> => letter:Char ]] (#10) -}

_letter :: NId.Family "letter"
_letter = NId.Family

type Inlets = (I "code" Hot UnitRepr :> TNil) :: Noodle.Inlets
type Outlets = (O "letter" UnitRepr :> TNil) :: Noodle.Outlets
type InletsRow = (code :: UnitRepr)
type OutletsRow = (letter :: UnitRepr)
type Shape = Noodle.Shape Inlets Outlets
type Process = Noodle.Process UnitRepr InletsRow OutletsRow UnitRepr Effect
type Node = Noodle.Node "letter" UnitRepr InletsRow OutletsRow UnitRepr Effect
type Family = Noodle.Family "letter" UnitRepr InletsRow OutletsRow UnitRepr Effect
type F = Noodle.F "letter" UnitRepr InletsRow OutletsRow UnitRepr Effect

defaultI :: Record InletsRow
defaultI = { code: UnitRepr }

defaultO :: Record OutletsRow
defaultO = { letter: UnitRepr }

_in_code = Noodle.Inlet :: _ "code"
_out_letter = Noodle.Outlet :: _ "letter"

family :: Family
family = Family.make _letter UnitRepr (Noodle.Shape :: Shape) defaultI defaultO letterP

makeNode :: Effect Node
makeNode = Family.spawn family

letterP :: Process
letterP = pure unit
