module Demo.Toolkit.Starter.Repr.Options where

import Prelude

import Color as Color

import Data.Maybe (Maybe(..), fromMaybe)
import Data.Newtype (unwrap) as NT
import Data.String (splitAt, drop) as String
import Data.Number (fromString) as Number
import Data.Array (length) as Array
import Data.Int (fromString, toNumber) as Int
import Data.Tuple.Nested ((/\), type (/\))
import Data.Text.Format as T

import Noodle.Fn.ToFn (class PossiblyToFn)

import Noodle.Ui.Cli.Palette.Item (colorOf) as C
import Noodle.Ui.Cli.Palette.Set.X11 as X11
import Noodle.Ui.Cli.Tagging.At (class At, at, ChannelLabel)
import Noodle.Ui.Cli.Palette.Mark (class Mark, mark)


import Type.Proxy (Proxy(..))

import Partial.Unsafe (unsafePartial)

import Tidy.Codegen
    ( exprCtor, exprApp, exprIdent, exprBool, exprChar, exprNumber, exprRecord, exprInt, exprArray, exprOp, exprParens
    , binaryOp
    , typeCtor, typeApp, typeOp
    , declImport, declImportAs, importOp, importType, importTypeOp, importValue
    )

import Noodle.Id (family) as Id
import Noodle.Repr.HasFallback (class HasFallback)
import Noodle.Repr.HasFallback (fallback) as HF
import Noodle.Repr.StRepr (class StRepr)
import Noodle.Repr.ChRepr (class ToChRepr, class FromChRepr, fromChRepr)
import Noodle.Repr.ChRepr (wrap, unwrap, fromEq, toEq) as CR
import Noodle.Fn.Shape.Temperament (defaultAlgorithm) as Temperament
import Noodle.Text.NdfFile.FamilyDef.Codegen
    ( class CodegenRepr, Options(..)
    , class ValueCodegen
    , mkExpression
    , groupPascalCase, familyPascalCase
    , pDefaultFor, pValueFor
    )
import Noodle.Text.NdfFile.Types (EncodedType(..), EncodedValue(..))

import Demo.Toolkit.Starter.Repr.StRepr (StateRepr)
import Demo.Toolkit.Starter.Repr.ChRepr (ValueRepr)


options :: Options StateRepr ValueRepr
options = Options $
    { streprAt : { module_ : "Demo.Toolkit.Starter.Repr", type_ : "StateRepr" }
    , chreprAt : { module_ : "Demo.Toolkit.Starter.Repr", type_ : "ValueRepr" }
    , temperamentAlgorithm : Temperament.defaultAlgorithm
    , monadAt : { module_ : "Effect", type_ : "Effect" }
    , familyModuleName : \fgroup family -> "StarterTk" <> "." <> groupPascalCase fgroup <> "." <> familyPascalCase family
    , pstrepr : (Proxy :: _ StateRepr)
    , pchrepr : (Proxy :: _ ValueRepr)
    , infoComment : Just $ \mbSource fgroup family ->
            "Generated by Noodle Codegen from NDF file. Group :: " <> show fgroup <> ". Family :: " <> show family <> "." <> case mbSource of
            Just src -> "\n\n[[ " <> src.line <> " ]] (#" <> show src.lineIndex <> ")"
            Nothing -> ""
    , tkImports : genericImports
    , familyImports : \familyR ->
        genericImports <> case Id.family familyR of
            "gennum" ->
                unsafePartial $
                    [ declImport "Effect.Class" [ importValue "liftEffect" ]
                    , declImport "Effect.Random" [ importValue "random" ]
                    , declImport "Signal" [ importOp "~>" ]
                    , declImportAs "Signal.Extra" [ ] "SignalX"
                    , declImportAs "Signal.Time" [ importValue "every" ] "Signal"
                    ]
            _ -> []
    }
    where
        genericImports = unsafePartial $
            [ declImport "Data.Tuple.Nested" [ importOp "/\\", importTypeOp "/\\" ]
            , declImportAs "Demo.Toolkit.Starter.Repr" [] "VR"
            ]
