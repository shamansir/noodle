module StarterTk.Spreads.Cspread where

import Prelude

import Demo.Toolkit.Starter.Repr (ValueRepr)
import Effect (Effect)
import Noodle.Fn.Process as Fn
import Noodle.Fn.Process as Noodle
import Noodle.Fn.Shape (I, O)
import Noodle.Fn.Shape as Noodle
import Noodle.Fn.Shape.Temperament (Cold, Hot)
import Noodle.Id as NId
import Noodle.Node as Noodle
import Noodle.Toolkit.Families as Noodle
import Noodle.Toolkit.Family as Family
import Noodle.Toolkit.Family as Noodle
import Type.Data.List (type (:>))
import Type.Data.List.Extra (TNil)
import Data.Tuple.Nested ((/\), type (/\))
import Demo.Toolkit.Starter.Repr as PR

{- Generated by Noodle Codegen from NDF file. Group :: spreads. Family :: cspread.

[[  spreads : cspread :: <red:SpreadN -> green:SpreadN -> blue:SpreadN -> alpha:SpreadN> => color:SpreadC ]] (#17) -}

_cspread :: NId.Family "cspread"
_cspread = NId.Family

type Inlets =
  ( I "red" Hot (PR.Spread Number) :> I "green" Hot (PR.Spread Number)
      :> I "blue" Hot (PR.Spread Number)
      :> I "alpha" Hot (PR.Spread Number)
      :> TNil
  ) :: Noodle.Inlets

type Outlets = (O "color" (PR.Spread PR.Color) :> TNil) :: Noodle.Outlets
type InletsRow =
  ( red :: PR.Spread Number
  , green :: PR.Spread Number
  , blue :: PR.Spread Number
  , alpha :: PR.Spread Number
  )

type OutletsRow = (color :: PR.Spread PR.Color)
type Shape = Noodle.Shape Inlets Outlets
type Process = Noodle.Process Unit InletsRow OutletsRow ValueRepr Effect
type Node = Noodle.Node "cspread" Unit InletsRow OutletsRow ValueRepr Effect
type Family = Noodle.Family "cspread" Unit InletsRow OutletsRow ValueRepr Effect
type F = Noodle.F "cspread" Unit InletsRow OutletsRow ValueRepr Effect

defaultI :: Record InletsRow
defaultI = { red: PR.Spread [], green: PR.Spread [], blue: PR.Spread [], alpha: PR.Spread [] }

defaultO :: Record OutletsRow
defaultO = { color: PR.Spread [] }

_in_red = Noodle.Inlet :: _ "red"
_in_green = Noodle.Inlet :: _ "green"
_in_blue = Noodle.Inlet :: _ "blue"
_in_alpha = Noodle.Inlet :: _ "alpha"
_out_color = Noodle.Outlet :: _ "color"

family :: Family
family = Family.make _cspread unit (Noodle.Shape :: Shape) defaultI defaultO cspreadP

makeNode :: Effect Node
makeNode = Family.spawn family

cspreadP :: Process
cspreadP = pure unit
