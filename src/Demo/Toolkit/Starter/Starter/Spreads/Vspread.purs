module StarterTk.Spreads.Vspread where

import Prelude

import Demo.Toolkit.Starter.Repr (ValueRepr)
import Effect (Effect)
import Noodle.Fn.Process as Fn
import Noodle.Fn.Process as Noodle
import Noodle.Fn.Shape (I, O)
import Noodle.Fn.Shape as Noodle
import Noodle.Fn.Shape.Temperament (Cold, Hot)
import Noodle.Id as NId
import Noodle.Node as Noodle
import Noodle.Toolkit.Families as Noodle
import Noodle.Toolkit.Family as Family
import Noodle.Toolkit.Family as Noodle
import Type.Data.List (type (:>))
import Type.Data.List.Extra (TNil)
import Data.Tuple.Nested ((/\), type (/\))
import Demo.Toolkit.Starter.Repr as PR

{- Generated by Noodle Codegen from NDF file. Group :: spreads. Family :: vspread.

[[  spreads : vspread :: <x:SpreadN -> y:SpreadN> => spread:SpreadV ]] (#16) -}

_vspread :: NId.Family "vspread"
_vspread = NId.Family

type Inlets =
  (I "x" Hot (PR.Spread Number) :> I "y" Hot (PR.Spread Number) :> TNil) :: Noodle.Inlets

type Outlets = (O "spread" (PR.Spread (Number /\ Number)) :> TNil) :: Noodle.Outlets
type InletsRow = (x :: PR.Spread Number, y :: PR.Spread Number)
type OutletsRow = (spread :: PR.Spread (Number /\ Number))
type Shape = Noodle.Shape Inlets Outlets
type Process = Noodle.Process ValueRepr InletsRow OutletsRow ValueRepr Effect
type Node = Noodle.Node "vspread" ValueRepr InletsRow OutletsRow ValueRepr Effect
type Family = Noodle.Family "vspread" ValueRepr InletsRow OutletsRow ValueRepr Effect
type F = Noodle.F "vspread" ValueRepr InletsRow OutletsRow ValueRepr Effect

defaultI :: Record InletsRow
defaultI = { x: PR.Spread [], y: PR.Spread [] }

defaultO :: Record OutletsRow
defaultO = { spread: PR.Spread [] }

_in_x = Noodle.Inlet :: _ "x"
_in_y = Noodle.Inlet :: _ "y"
_out_spread = Noodle.Outlet :: _ "spread"

family :: Family
family = Family.make _vspread PR.VNone (Noodle.Shape :: Shape) defaultI defaultO vspreadP

makeNode :: Effect Node
makeNode = Family.spawn family

vspreadP :: Process
vspreadP = pure unit
