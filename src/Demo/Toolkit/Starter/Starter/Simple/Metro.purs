module StarterTk.Simple.Metro where

import Prelude

import Demo.Toolkit.Starter.Repr (ValueRepr)
import Effect (Effect)
import Noodle.Fn.Process as Fn
import Noodle.Fn.Process as Noodle
import Noodle.Fn.Shape (I, O)
import Noodle.Fn.Shape as Noodle
import Noodle.Fn.Shape.Temperament (Cold, Hot)
import Noodle.Id as NId
import Noodle.Node as Noodle
import Noodle.Toolkit.Families as Noodle
import Noodle.Toolkit.Family as Family
import Noodle.Toolkit.Family as Noodle
import Type.Data.List (type (:>))
import Type.Data.List.Extra (TNil)
import Data.Tuple.Nested ((/\), type (/\))
import Demo.Toolkit.Starter.Repr as VR

{- Generated by Noodle Codegen from NDF file. Group :: simple. Family :: metro.

[[  simple : metro :: <enabled:Bool {b/true} -> period:Time {t/2s}> => bang:Bang ]] (#9) -}

_metro :: NId.Family "metro"
_metro = NId.Family

type Inlets = (I "enabled" Hot Boolean :> I "period" Hot VR.Time :> TNil) :: Noodle.Inlets
type Outlets = (O "bang" VR.Bang :> TNil) :: Noodle.Outlets
type InletsRow = (enabled :: Boolean, period :: VR.Time)
type OutletsRow = (bang :: VR.Bang)
type Shape = Noodle.Shape Inlets Outlets
type Process = Noodle.Process Unit InletsRow OutletsRow ValueRepr Effect
type Node = Noodle.Node "metro" Unit InletsRow OutletsRow ValueRepr Effect
type Family = Noodle.Family "metro" Unit InletsRow OutletsRow ValueRepr Effect
type F = Noodle.F "metro" Unit InletsRow OutletsRow ValueRepr Effect

defaultI :: Record InletsRow
defaultI = { enabled: true, period: VR.Time { seconds: 0 } }

defaultO :: Record OutletsRow
defaultO = { bang: VR.Bang }

_in_enabled = Noodle.Inlet :: _ "enabled"
_in_period = Noodle.Inlet :: _ "period"
_out_bang = Noodle.Outlet :: _ "bang"

family :: Family
family = Family.make _metro unit (Noodle.Shape :: Shape) defaultI defaultO metroP

makeNode :: Effect Node
makeNode = Family.spawn family

metroP :: Process
metroP = pure unit
