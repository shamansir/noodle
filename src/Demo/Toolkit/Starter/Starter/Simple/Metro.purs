module StarterTk.Simple.Metro where

import Prelude

import Demo.Toolkit.Starter.Repr (StarterRepr)
import Effect (Effect)
import Noodle.Fn.Process as Fn
import Noodle.Fn.Process as Noodle
import Noodle.Fn.Shape (I, O)
import Noodle.Fn.Shape as Noodle
import Noodle.Fn.Shape.Temperament (Cold, Hot)
import Noodle.Id as NId
import Noodle.Node as Noodle
import Noodle.Toolkit.Families as Noodle
import Noodle.Toolkit.Family as Family
import Noodle.Toolkit.Family as Noodle
import Type.Data.List (type (:>))
import Type.Data.List.Extra (TNil)
import Data.Tuple.Nested ((/\), type (/\))
import Demo.Toolkit.Starter.Repr as PR
import Signal ((~>))
import Signal.Extra (runSignal) as SignalX
import Signal.Time (every) as Signal

{- Generated by Noodle Codegen from NDF file. Group :: simple. Family :: metro.

[[  simple : metro :: <enabled:Bool {b/true} -> period:Time {t/2s}> => bang:Bang ]] (#9) -}

_metro :: NId.Family "metro"
_metro = NId.Family

type Inlets = (I "enabled" Hot Boolean :> I "period" Hot PR.Time :> TNil) :: Noodle.Inlets
type Outlets = (O "bang" PR.Bang :> TNil) :: Noodle.Outlets
type InletsRow = (enabled :: Boolean, period :: PR.Time)
type OutletsRow = (bang :: PR.Bang)
type Shape = Noodle.Shape Inlets Outlets
type Process = Noodle.Process StarterRepr InletsRow OutletsRow StarterRepr Effect
type Node = Noodle.Node "metro" StarterRepr InletsRow OutletsRow StarterRepr Effect
type Family = Noodle.Family "metro" StarterRepr InletsRow OutletsRow StarterRepr Effect
type F = Noodle.F "metro" StarterRepr InletsRow OutletsRow StarterRepr Effect

defaultI :: Record InletsRow
defaultI = { enabled: true, period: PR.Time { seconds: 0 } }

defaultO :: Record OutletsRow
defaultO = { bang: PR.Bang }

_in_enabled = Noodle.Inlet :: _ "enabled"
_in_period = Noodle.Inlet :: _ "period"
_out_bang = Noodle.Outlet :: _ "bang"

family :: Family
family = Family.make _metro PR.VNone (Noodle.Shape :: Shape) defaultI defaultO metroP

makeNode :: Effect Node
makeNode = Family.spawn family

metroP :: Process
metroP = do
    sendBang <- Fn.spawn $ Noodle.send _out_bang PR.Bang
    Noodle.lift $ SignalX.runSignal $ Signal.every 100.0 ~> const sendBang
