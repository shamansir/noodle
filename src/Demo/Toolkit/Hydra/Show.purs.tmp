instance Show TOrV where
    show = case _ of
        T tex -> show tex
        V val -> show val


instance Show OTOrV where
    show = case _ of
        OT -> "TEX"
        OV -> "VAL"


instance Show JsExpr where
    show :: JsExpr -> String
    show = case _ of
        Val value -> show value
        AddE v1 v2 -> show v1 <> " + " <> show v2
        SubE v1 v2 -> show v1 <> " - " <> show v2
        MulE v1 v2 -> show v1 <> " * " <> show v2
        DivE v1 v2 -> show v1 <> " / " <> show v2
        ModE v1 v2 -> show v1 <> " % " <> show v2
        Math meth maybeExpr ->
            "Math." <> show meth <>
                (case maybeExpr of
                    Just expr -> "(" <> show expr <> ")"
                    Nothing -> ""
                )
        Brackets expr -> "( " <> show expr <> " )"


instance Show DepFn where
    show :: DepFn -> String
    show = case _ of
        UserExpr jsexpr -> ":: " <> show jsexpr <> " ::"
        DepFn _ -> "[Code]"
        Unparsed str -> "{{ " <> str <> " }}"
        NoAction -> "--"


instance Show Value where
    show :: Value -> String
    show = case _ of
        None -> "<None>"
        Undefined -> "<Undefined>"
        Number n -> "#" <> show n
        VArray vals ease -> "<" <> show vals <> " at " <> show ease <> ">"
        Dep fn -> "<Dep " <> show fn <> ">"
        Time -> "<Time>"
        MouseX -> "<Mouse X>"
        MouseY -> "<Mouse Y>"
        Width -> "<Width>"
        Height -> "<Height>"
        Pi -> "<Pi>"
        Fft bin -> "<@ " <> show bin <> ">"


instance Show Texture where
    show :: Texture -> String
    show = case _ of
        Empty -> "âˆ…" -- "?"
        Start src -> "â€¢ " <> show src
        BlendOf { what, with } blend -> show with <> " + " <> show what <> " >~  â–‘ " <> show blend
        Filter texture op -> show texture <> " >~ Æ’ " <> show op
        ModulateWith { what, with } mod -> show with <> " + " <> show what <> " >~ Â¤ " <> show mod
        Geometry texture gmt -> show texture <> " >~ â–  " <> show gmt
        CallGlslFn texture glslFn -> show texture <> " >~ $ " <> show glslFn


        {-
        BlendOf { what, with } blend -> show with <> " + " <> show what <> " >~ " <> show blend
        Filter texture op -> show texture <> " >~ " <> show op
        ModulateWith { what, with } mod -> show with <> " + " <> show what <> " >~ " <> show mod
        Geometry texture gmt -> show texture <> " >~ " <> show gmt
        -}
        {-
        BlendOf { what, with } blend -> show with <> " + " <> show what <> " >~ Blend " <> show blend
        Filter texture op -> show texture <> " >~ Filter " <> show op
        ModulateWith { what, with } mod -> show with <> " + " <> show what <> " >~ Modulate " <> show mod
        Geometry texture gmt -> show texture <> " >~ Geom " <> show gmt
        -}


instance Show Blend where
    show :: Blend -> String
    show = showUsingFnV


instance Show ColorOp where
    show :: ColorOp -> String
    show = showUsingFnV


instance Show Modulate where
    show :: Modulate -> String
    show = showUsingFnV


instance Show Geometry where
    show :: Geometry -> String
    show = showUsingFnV


instance Show TODO where
    show :: TODO -> String
    show = const "TODO"


instance Show Context where
    show :: Context -> String
    show (Context { time }) = "Context { " <> show time <> " }"


instance Show UpdateFn where
    show :: UpdateFn -> String
    show = const "Update Function" -- TODO


instance Show From where
    show :: From -> String
    show = -- showUsingFnV
        case _ of
            Gradient { speed } -> "Gradient " <> show speed
            Noise { scale, offset } -> "Noise " <> show scale <> " " <> show offset
            Osc { frequency, sync, offset } -> "Osc " <> show frequency <> " " <> show sync <> " " <> show offset
            Shape { sides, radius, smoothing } -> "Shape " <> show sides <> " " <> show radius <> " " <> show smoothing
            Solid { r, g, b, a } -> "Solid " <> show r <> " " <> show g <> " " <> show b <> " " <> show a
            Voronoi { scale, speed, blending } -> "Voronoi " <> show scale <> " " <> show speed <> " " <> show blending


instance Show Source where
    show :: Source -> String
    show = case _ of
        From from -> show from
        Load outputN -> "Load " <> show outputN
        External sourceN ext -> "External " <> show sourceN <> " " <> show ext


instance Show Url where
    show :: Url -> String
    show (Url url) = "Url: " <> show url


instance Show GlslFnKind where
    show :: GlslFnKind -> String
    show = case _ of
        FnSrc -> "Source"
        FnCoord -> "Coord"
        FnCombineCoord -> "CombineCoord"
        FnCombine -> "Combine"
        FnColor -> "Color"


instance Show GlslFn where
    show :: GlslFn -> String
    show (GlslFn { kind, fn }) = "Define {" <> show kind <> "} " <> showUsingFnTOrV' fn


instance Show GlslFnRef where
    show :: GlslFnRef -> String
    show (GlslFnRef fn) = "Call " <> showUsingFnTOrV' fn


instance Show SourceOptions where
    show :: SourceOptions -> String
    show (SourceOptions { src }) = "Source Options { " {- TODO : <> show src -} <> " }"


instance Show Values where
    show :: Values -> String
    show (Values array) = "[" <> String.joinWith "," (show <$> array) <> "]"


instance Show Ease where
    show :: Ease -> String
    show = case _ of
        Linear -> "Linear"
        Fast v -> "Fast " <> show v
        Smooth v -> "Smooth " <> show v
        Fit { low, high } -> "Fit " <> show low <> " < " <> show high
        Offset v -> "Offset " <> show v
        InOutCubic -> "InOutCubic"


instance Show AudioSource where
    show :: AudioSource -> String
    show = case _ of
        Silence -> "Silence"
        Mic -> "Microphone"
        File -> "File"


instance Show AudioBin where
    show :: AudioBin -> String
    show (AudioBin n) = "@" <> show n


instance Show SourceN where
    show :: SourceN -> String
    show = case _ of
        Source0 -> "Source 0"


instance Show ExtSource where
    show :: ExtSource -> String
    show = case _ of
        Camera n -> "Camera " <> show n -- ðŸŽ¥
        Sketch name -> "Sketch " <> name
        Video -> "Video"
        Unclear -> "Unclear"


instance Show CanBeSource where
    show :: CanBeSource -> String
    show (CanBeSource cbs) = case cbs of
        Left sourceN -> show sourceN
        Right outputN -> show outputN


instance Show OutputN where
    show :: OutputN -> String
    show = case _ of
        Output0 -> "Output 0"
        Output1 -> "Output 1"
        Output2 -> "Output 2"
        Output3 -> "Output 3"
        Output4 -> "Output 4"


instance Show RenderTarget where
    show :: RenderTarget -> String
    show Four = "Four"
    show (Output oN) = show oN
